// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid()
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  country   String
  codePhone String?  @map("code_phone")
  phone     String?
  roleId    String   @map("role_id") @db.Uuid()
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  role            Role              @relation(fields: [roleId], references: [id])
  veterinary      Veterinary[]
  petPreference   PetPreference[]
  review          Review[]
  cart            Cart[]
  purchase        Purchase[]
  productFavorite ProductFavorite[]
}

model Role {
  id        String   @id @default(uuid()) @db.Uuid()
  name      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  user User[]
}

model Veterinary {
  id          String   @id @default(uuid()) @db.Uuid()
  userId      String   @map("user_id") @db.Uuid()
  name        String
  description String
  country     String
  address     String
  latitude    String
  longitud    String
  phone       String
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")

  user    User      @relation(fields: [userId], references: [id])
  review  Review[]
  product Product[]
}

model PetCategory {
  id        String   @id @default(uuid()) @db.Uuid()
  name      String
  breed     String
  size      String
  age       Int
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  petPreference PetPreference[]

  @@map("Pet_category")
}

model PetPreference {
  id            String   @id @default(uuid()) @db.Uuid()
  petCategoryId String   @map("pet_category_id") @db.Uuid()
  userId        String   @map("user_id") @db.Uuid()
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt() @map("updated_at")

  petCategory PetCategory @relation(fields: [petCategoryId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("Pet_preference")
}

enum Rating {
  Unacceptable        @map("1")
  NeedsImprovement    @map("2")
  MeetsExpectations   @map("3")
  ExceedsExpectations @map("4")
  Outstanding         @map("5")
}

model Review {
  id           String   @id @default(uuid()) @db.Uuid()
  comment      String
  rating       Rating
  userId       String   @unique @map("user_id") @db.Uuid()
  veterinaryId String   @map("veterinary_id") @db.Uuid()
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt() @map("updated_at")

  user       User       @relation(fields: [userId], references: [id])
  veterinary Veterinary @relation(fields: [veterinaryId], references: [id])
}

model Product {
  id                String   @id @default(uuid()) @db.Uuid()
  name              String
  description       String
  price             Decimal
  quantity          Int
  veterinaryId      String   @map("veterinary_id") @db.Uuid()
  productCategoryId String   @map("product_category_id") @db.Uuid()
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt() @map("updated_at")

  veterinary      Veterinary        @relation(fields: [veterinaryId], references: [id])
  productCategory ProductCategory   @relation(fields: [productCategoryId], references: [id])
  productImage    ProductImage[]
  productInCart   ProductInCart[]
  productFavorite ProductFavorite[]
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid()
  imageUrl  String   @map("image_url")
  productId String   @map("product_id") @db.Uuid()
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("Product_image")
}

model ProductCategory {
  id        String   @id @default(uuid()) @db.Uuid()
  name      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  product Product[]

  @@map("Product_category")
}

model Cart {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @map("user_id") @db.Uuid()
  isPaid    Boolean  @default(false) @map("is_paid")
  total     Decimal
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  user          User            @relation(fields: [userId], references: [id])
  productInCart ProductInCart[]
  purchase      Purchase[]
}

model ProductInCart {
  id        String   @id @default(uuid()) @db.Uuid()
  productId String   @map("product_id") @db.Uuid()
  cartId    String   @map("cart_Id") @db.Uuid()
  quantity  Int
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])

  @@map("Product_in_cart")
}

model Purchase {
  id        String   @id @default(uuid()) @db.Uuid()
  cartId    String   @map("cart_id") @db.Uuid()
  userId    String   @map("user_id") @db.Uuid()
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  cart Cart @relation(fields: [cartId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model ProductFavorite {
  id        String @id @default(uuid()) @db.Uuid()
  userId    String @map("user_id") @db.Uuid()
  productId String @map("product_id") @db.Uuid()

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("Product_favorite")
}
